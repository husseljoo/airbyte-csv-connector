#
# Copyright (c) 2023 Airbyte, Inc., all rights reserved.
#


import json
import paramiko
from datetime import datetime
from typing import Dict, Generator

from airbyte_cdk.logger import AirbyteLogger
from airbyte_cdk.models.airbyte_protocol import (
    AirbyteCatalog,
    AirbyteConnectionStatus,
    AirbyteMessage,
    AirbyteRecordMessage,
    AirbyteStateMessage,
    AirbyteStream,
    ConfiguredAirbyteCatalog,
    Status,
    Type,
    AirbyteStateType,
    AirbyteStreamState,
    StreamDescriptor,
    AirbyteStateBlob,
)
from airbyte_cdk.sources import Source
from source_orange_files.client import SftpClient


class SourceOrangeFiles(Source):

    def parse_config(self, config):
        return (
            str(config.get("host")),
            int(str(config.get("port"))),
            str(config.get("username")),
            str(config.get("password")),
            str(config.get("path")),
        )

    def check(self, logger: AirbyteLogger, config: json) -> AirbyteConnectionStatus:
        """
        Tests if the input configuration can be used to successfully connect to the integration
            e.g: if a provided Stripe API token can be used to connect to the Stripe API.

        :param logger: Logging object to display debug/info/error to the logs
            (logs will not be accessible via airbyte UI if they are not passed to this logger)
        :param config: Json object containing the configuration of this source, content of this json is as specified in
        the properties of the spec.yaml file

        :return: AirbyteConnectionStatus indicating a Success or Failure
        """
        try:
            host, port, username, password, _ = self.parse_config(config)

            with paramiko.Transport((host, port)) as source_transport:
                source_transport.connect(username=username, password=password)
            return AirbyteConnectionStatus(status=Status.SUCCEEDED)
        except Exception as e:
            return AirbyteConnectionStatus(
                status=Status.FAILED, message=f"An exception occurred: {str(e)}"
            )

    def discover(self, logger: AirbyteLogger, config: json) -> AirbyteCatalog:
        """
        Returns an AirbyteCatalog representing the available streams and fields in this integration.
        For example, given valid credentials to a Postgres database,
        returns an Airbyte catalog where each postgres table is a stream, and each table column is a field.

        :param logger: Logging object to display debug/info/error to the logs
            (logs will not be accessible via airbyte UI if they are not passed to this logger)
        :param config: Json object containing the configuration of this source, content of this json is as specified in
        the properties of the spec.yaml file

        :return: AirbyteCatalog is an object describing a list of all available streams in this source.
            A stream is an AirbyteStream object that includes:
            - its stream name (or table name in the case of Postgres)
            - json_schema providing the specifications of expected schema for this stream (a list of columns described
            by their names and types)
        """
        streams = []

        stream_name = "StreamName"
        json_schema = {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
                "modification_time": {"type": "integer"},
                "file_name": {"type": "string"},
            },
        }
        default_cursor_field = ["modification_time"]
        source_defined_primary_key = [["file_name"]]
        supported_sync_modes = ["full_refresh", "incremental"]

        streams.append(
            AirbyteStream(
                name=stream_name,
                json_schema=json_schema,
                source_defined_cursor=True,
                source_defined_primary_key=source_defined_primary_key,
                default_cursor_field=default_cursor_field,
                supported_sync_modes=supported_sync_modes,
            )
        )
        return AirbyteCatalog(streams=streams)

    def read(
        self,
        logger: AirbyteLogger,
        config: json,
        catalog: ConfiguredAirbyteCatalog,
        state: Dict[str, any],
    ) -> Generator[AirbyteMessage, None, None]:
        """
        Returns a generator of the AirbyteMessages generated by reading the source with the given configuration,
        catalog, and state.

        :param logger: Logging object to display debug/info/error to the logs
            (logs will not be accessible via airbyte UI if they are not passed to this logger)
        :param config: Json object containing the configuration of this source, content of this json is as specified in
            the properties of the spec.yaml file
        :param catalog: The input catalog is a ConfiguredAirbyteCatalog which is almost the same as AirbyteCatalog
            returned by discover(), but
        in addition, it's been configured in the UI! For each particular stream and field, there may have been provided
        with extra modifications such as: filtering streams and/or columns out, renaming some entities, etc
        :param state: When a Airbyte reads data from a source, it might need to keep a checkpoint cursor to resume
            replication in the future from that saved checkpoint.
            This is the object that is provided with state from previous runs and avoid replicating the entire set of
            data everytime.

        :return: A generator that produces a stream of AirbyteRecordMessage contained in AirbyteMessage object.
        """
        stream_name = "StreamName"
        stream = None

        print("STATE is:")
        print(state)
        print("\n\n\n\n\n\n\n")

        for configured_stream in catalog.streams:
            print("\n\nconfigured_stream:")
            print(configured_stream)
            print("\n\n")
            stream = configured_stream.stream
            stream_name = configured_stream.stream.name

        prev_latest_mod_time = 0
        if state:
            print(type(state))
            state_message = state[0]
            print(state_message.stream)
            print(state_message.stream.stream_descriptor)
            print(state_message.stream.stream_state)
            print(type(state_message.stream.stream_state))
            state_data = dict(state_message.stream.stream_state)
            print(f"state_data: {state_data}")
            state_data_name = state_data.get(stream_name)
            print(f"state_data_name: {state_data_name}")
            prev_latest_mod_time = state_data.get(stream_name).get("modification_time")
            print(f"prev_latest_mod_time: {prev_latest_mod_time}")

        # # In case of incremental sync, state should contain the last date when we fetched stock prices
        # prev_latest_mod_time = 0
        # if "incremental" in stream.supported_sync_modes:
        #     if (
        #         state
        #         and stream_name in state
        #         and state[stream_name].get("modification_time")
        #     ):
        #         prev_latest_mod_time = state.stream_state[stream_name].get(
        #             "modification_time"
        #         )

        host, port, username, password, path = self.parse_config(config)
        # I think this is better to decouple source and destination (the source can easily change servers,direcories etc. without affecting the destinaton)
        # data = {
        #     "host": host,
        #     "port": port,
        #     "username": username,
        #     "password": password,
        #     "path": path,
        # }
        latest_mod_time = prev_latest_mod_time
        data = {}
        sftp_client = SftpClient(config)
        for file in sftp_client.list_files(target_time=1710588487):
            if file.st_mtime <= prev_latest_mod_time:
                continue
            data["modification_time"] = file.st_mtime
            data["file_name"] = file.filename
            latest_mod_time = max(latest_mod_time, file.st_mtime)
            yield AirbyteMessage(
                type=Type.RECORD,
                record=AirbyteRecordMessage(
                    stream=stream_name,
                    data=data,
                    emitted_at=int(datetime.now().timestamp()) * 1000,
                ),
            )

        # Emit new state message.
        # print(stream)

        #         if sync_mode == "incremental":
        state_data = {stream_name: {"modification_time": latest_mod_time}}
        print("ZZZZZ")
        print(state_data)
        print("ZZZZZ")

        yield AirbyteMessage(
            type=Type.STATE,
            state=AirbyteStateMessage(
                type=AirbyteStateType.STREAM,
                stream=AirbyteStreamState(
                    stream_descriptor=StreamDescriptor(
                        name=stream_name, namespace=None
                    ),
                    stream_state=AirbyteStateBlob.parse_obj(state_data),
                ),
            ),
        )
        arr = AirbyteStateBlob.parse_obj(state_data)
        print(f"arr: {arr}")
        x = dict(arr).get(stream_name).get("modification_time")
        print(f"x: {x}")
